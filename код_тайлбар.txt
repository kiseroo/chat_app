# ЧАТЫН ПРОГРАМЫН КОД ТАЙЛБАР

## ЕРӨНХИЙ ТАНИЛЦУУЛГА

Энэхүү програм нь HTTP протокол ашиглан олон хэрэглэгчид мессеж солилцох боломжийг олгодог чатын вэб аппликейшн юм. Програм нь Python хэл дээр бичигдсэн бөгөөд Flask вэб сервер болон HTML/CSS/JavaScript ашиглан хэрэгжүүлсэн.

## СИСТЕМИЙН АРХИТЕКТУР

Програм нь client-server архитектурт суурилсан бөгөөд дараах үндсэн хэсгүүдээс бүрдэнэ:

1. **Вэб сервер** - Flask ашиглан хэрэгжүүлсэн, клиентүүдтэй харилцах вэб сервер.
2. **Вэб клиент** - HTML, CSS, JavaScript ашиглан хийгдсэн хэрэглэгчийн вэб интерфейс.
3. **Мессеж болон түүхийн удирдлага** - Мессежүүдийн бүтэц, түүхийг удирдах классууд.

## ФАЙЛУУДЫН ТАЙЛБАР

### message.py - Мессеж зохицуулагч класс

Энэ файл нь чатын мессежийг төлөөлөх `Message` классыг агуулдаг. Класс нь дараах үндсэн функцуудтай:

- **__init__(sender, content, timestamp)**: Байгуулагч функц. Мессежийн илгээгч, агуулга, илгээсэн цагийг хадгална.
- **__str__()**: Мессежийг "[цаг] илгээгч: агуулга" хэлбэрээр хэвлэх.
- **to_dict()**: Мессежийг JSON хэлбэрээр хадгалахад зориулж dictionary хэлбэрт хувиргана.
- **from_dict()**: Dictionary-гээс Message объект үүсгэх класс метод.

`Message` класс нь илгээгч, агуулга, цаг зэрэг мэдээллийг нэг объектод ашиглахад хялбар байдлаар багцалж өгдөг.

### chat_history.py - Чатын түүх зохицуулагч класс

Энэ файл нь чатын түүхийг удирдах `ChatHistory` классыг агуулдаг. Класс нь дараах үндсэн функцуудтай:

- **__init__(filename)**: Файлын нэрийг авч, чатын түүхийг хадгалах байршлыг тохируулна.
- **add_message(message)**: Шинэ мессеж нэмж, файлд хадгална.
- **get_messages(count)**: Сүүлийн мессежүүдийг авах. Count параметр null бол бүх мессежийг буцаана.
- **load_history()**: Файлаас чатын түүхийг ачаалж, Message объектууд болгон хувиргана.
- **save_history()**: Чатын мессежүүдийг JSON хэлбэрээр файлд хадгална.

Энэ класс нь програм дахин эхэлсэн ч өмнөх чатын түүхийг хадгалж, хэрэглэгчдэд харуулах боломжийг олгодог.

### web_server.py - Flask Вэб интерфейс

Энэ файл нь вэб интерфейс хангах Flask аппликейшныг агуулна. Үндсэн хэсгүүд:

- **Flask app инициализац**: Flask аппликейшн, session удирдлага тохируулах.
- **cleanup_inactive_clients()**: Идэвхгүй хэрэглэгчдийг шалгаж, системээс гаргах функц.
- **Маршрутууд**:
  - **/ (index)**: Үндсэн хуудас, нэвтрэх форм харуулах.
  - **/login**: Нэвтрэх хүсэлт боловсруулах.
  - **/logout**: Гарах хүсэлт боловсруулах.
  - **/chat**: Чатын үндсэн хуудас харуулах.
  - **/send**: Мессеж илгээх API.
  - **/messages**: Шинэ мессежүүд авах API (polling).
  - **/active_users**: Идэвхтэй хэрэглэгчдийн жагсаалт авах API.

Энэ файл нь хэрэглэгчид вэб браузераар чатын програмд нэвтрэх боломжийг олгодог.

### templates/login.html - Нэвтрэх хуудасны загвар

Энэ файл нь хэрэглэгчийн нэр оруулах нэвтрэх формыг агуулсан HTML хуудас юм. Үндсэн хэсгүүд:

- CSS загварчлал: Хуудасны харагдах байдлыг тохируулах.
- HTML бүтэц: Нэвтрэх форм, оролтын талбар, товчлуур.
- Form-ын action="/login" атрибут нь login маршрут руу хүсэлт илгээнэ.

### templates/chat.html - Чатын хуудасны загвар

Энэ файл нь чатын үндсэн хуудсыг агуулсан HTML хуудас юм. Үндсэн хэсгүүд:

- **CSS загварчлал**: Хуудасны харагдах байдлыг тохируулах.
- **HTML бүтэц**:
  - header - гарчиг, гарах товчлуур
  - sidebar - идэвхтэй хэрэглэгчдийн жагсаалт
  - chat-container - мессежийн талбар, оролтын хэсэг
- **JavaScript функцууд**:
  - **sendMessage()**: Мессеж илгээх хүсэлт явуулах.
  - **fetchMessages()**: Шинэ мессежүүд авах (polling).
  - **fetchActiveUsers()**: Идэвхтэй хэрэглэгчдийн жагсаалт авах.
  - **addMessageToUI()**: Мессежийг интерфейст нэмэх.
  - **updateUsersList()**: Хэрэглэгчдийн жагсаалтыг шинэчлэх.

## СИСТЕМИЙН АЖИЛЛАГААНЫ ТАЙЛБАР

### Вэб интерфейсийн ажиллагаа

1. Хэрэглэгч вэб браузераар нэвтрэх хуудсыг нээнэ.
2. Хэрэглэгчийн нэрээ оруулж нэвтрэхэд Flask session үүсч, хэрэглэгч чатын хуудас руу шилжинэ.
3. Чатын хуудас дээр JavaScript функцууд ажиллаж эхлэх:
   - fetchMessages() функц чатын түүхийг сервереэс авч харуулна.
   - setInterval() ашиглан тогтмол хугацаанд шинэ мессежүүд шалгагдана.
   - Идэвхтэй хэрэглэгчдийн жагсаалт мөн тогтмол шинэчлэгдэнэ.
4. Хэрэглэгч мессеж илгээхэд JavaScript fetch() хүсэлт /send API руу илгээгдэнэ.
5. Сервер мессежийг хадгалж, шинэ мессежийн дарааллд нэмнэ.
6. Бусад хэрэглэгчид тогтмол шалгалтаар /messages API-г дуудах үед шинэ мессеж авч харуулна.
7. Хэрэглэгч гарах товчлуур дарах үед /logout хүсэлт илгээгдэж, session цэвэрлэгдэнэ.

### Файлын систем, чатын түүх

1. Программ ажиллах явцад илгээгдсэн бүх мессежүүд ChatHistory класс ашиглан JSON файлд хадгалагдана.
2. Програм дахин ачаалагдахад чатын түүх файлаас ачаалагдана.
3. Бүх хэрэглэгчид ижил чатын түүхийг харах боломжтой.

## КОДЫН ЧУХАЛ ХЭСГҮҮД

### 1. Олон сэтгүүл (Threading) ашиглалт - Идэвхгүй клиентүүдийг шалгах

```python
cleanup_thread = threading.Thread(target=cleanup_inactive_clients)
cleanup_thread.daemon = True
cleanup_thread.start()
```

### 2. Вэб маршрутууд (Flask)

```python
@app.route('/send', methods=['POST'])
def send_message():
    if 'username' not in session:
        return jsonify({'status': 'error', 'message': 'Not logged in'})
    
    content = request.form.get('content', '').strip()
    if not content:
        return jsonify({'status': 'error', 'message': 'Empty message'})
    
    username = session['username']
    connected_clients[username] = datetime.datetime.now()
    
    message = Message(username, content)
    chat_history.add_message(message)
    message_queue.append(str(message))
    
    return jsonify({'status': 'success'})
```

### 3. JavaScript AJAX хүсэлтүүд

```javascript
function sendMessage() {
    const content = messageInput.value.trim();
    if (!content) return;
    
    // Send the message to server
    fetch('/send', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `content=${encodeURIComponent(content)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            messageInput.value = '';
        }
    })
    .catch(error => console.error('Error sending message:', error));
}
```

## ӨРГӨТГӨХ БОЛОМЖУУД

Энэхүү чатын програм дараах чиглэлээр өргөтгөж болно:

1. **Мультимедиа дэмжлэг**: Зураг, файл илгээх боломж нэмэх.
2. **Хувийн мессежүүд**: Хэрэглэгчид хоорондоо хувийн чат үүсгэх боломж.
3. **Шифрлэлт**: End-to-end шифрлэлт нэмж, мессежүүдийн аюулгүй байдлыг хангах.
4. **Мобайл аппликейшн**: Мобайл төхөөрөмжид зориулсан клиент үүсгэх.
5. **Чат өрөөнүүд**: Өөр өөр сэдэвтэй чат өрөөнүүд үүсгэх боломж.
6. **Хэрэглэгчийн эрх**: Админ, модератор зэрэг эрхүүд нэмэх.
7. **Мэдэгдэл**: Вэб мэдэгдлүүд нэмэх.
8. **WebSocket**: Polling-ийн оронд WebSocket ашиглан бодит хугацааны харилцааг сайжруулах.

## ДҮГНЭЛТ

Энэхүү чатын програм нь Flask, JavaScript болон вэб технологиудыг ашиглан хэрэгжүүлсэн бодит хугацааны харилцааны вэб аппликейшн юм. Вэб интерфейс нь хэрэглэгчдэд аль ч төхөөрөмжөөс чатад нэвтрэх боломжийг олгодог.

Програм нь өргөтгөх боломжтой бүтэцтэй бөгөөд цаашид дурдсан чиглэлүүдээр хөгжүүлэлт хийх боломжтой юм. 